/* 
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.
*/

class Solution {
public:

    bool check(vector<int> count){
        for(int i = 0; i < 26; i++){
            if(count[i] != 0){
                return false;
            }
        }
        return true;
    }
    bool checkInclusion(string s1, string s2) {
        if(s1.size() > s2.size())
        return false;
        
        vector<int> count(26);
        
        for(int i = 0; i < s1.size(); i++){
            count[s1[i]-'a']++;
            count[s2[i]-'a']--;
        }

        if(check(count)){
            return true;
        }

        for(int i = s1.size(); i < s2.size(); i++){
            count[s2[i-s1.size()]-'a']++;
            count[s2[i]-'a']--;

            if(check(count)){
                return true;
            }
        }
        return false;

    }
};
